// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Telaxia_Backend.Telaxia.Persistence.Contexts;

#nullable disable

namespace texlaxia_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220606152200_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cooperative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<string>("Editor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Cooperatives", (string)null);
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Design", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DateCreatedId")
                        .HasColumnType("int");

                    b.Property<int>("DateEditedId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedId");

                    b.HasIndex("DateEditedId");

                    b.HasIndex("UserId");

                    b.ToTable("Designs", (string)null);
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PostLikesId")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostLikesId")
                        .IsUnique();

                    b.ToTable("Informations", (string)null);
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DatePostedId")
                        .HasColumnType("int");

                    b.Property<int>("DesignId")
                        .HasColumnType("int");

                    b.Property<int>("PostLike")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DatePostedId");

                    b.HasIndex("DesignId")
                        .IsUnique();

                    b.HasIndex("ProfileId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId")
                        .IsUnique();

                    b.HasIndex("UserTypeId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes", (string)null);
                });

            modelBuilder.Entity("Cooperative", b =>
                {
                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Design", "Design")
                        .WithOne("Cooperative")
                        .HasForeignKey("Cooperative", "DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.User", "User")
                        .WithMany("Cooperatives")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Design", b =>
                {
                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Date", "DateCreated")
                        .WithMany("Designs_DateCreated")
                        .HasForeignKey("DateCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Date", "DateEdited")
                        .WithMany("Designs_DateEdited")
                        .HasForeignKey("DateEditedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.User", "User")
                        .WithMany("Designs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateCreated");

                    b.Navigation("DateEdited");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Information", b =>
                {
                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Post", "PostLikes")
                        .WithOne("Information")
                        .HasForeignKey("Telaxia_Backend.Telaxia.Domain.Models.Information", "PostLikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Post", b =>
                {
                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Date", "DatePosted")
                        .WithMany("Posts")
                        .HasForeignKey("DatePostedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Design", "Design")
                        .WithOne("Post")
                        .HasForeignKey("Telaxia_Backend.Telaxia.Domain.Models.Post", "DesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Profile", "Profile")
                        .WithMany("Posts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatePosted");

                    b.Navigation("Design");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Profile", b =>
                {
                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.User", b =>
                {
                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.Plan", "Plan")
                        .WithOne("User")
                        .HasForeignKey("Telaxia_Backend.Telaxia.Domain.Models.User", "PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telaxia_Backend.Telaxia.Domain.Models.UserType", "UserType")
                        .WithOne("User")
                        .HasForeignKey("Telaxia_Backend.Telaxia.Domain.Models.User", "UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Date", b =>
                {
                    b.Navigation("Designs_DateCreated");

                    b.Navigation("Designs_DateEdited");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Design", b =>
                {
                    b.Navigation("Cooperative")
                        .IsRequired();

                    b.Navigation("Post")
                        .IsRequired();
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Plan", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Post", b =>
                {
                    b.Navigation("Information");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.Profile", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.User", b =>
                {
                    b.Navigation("Cooperatives");

                    b.Navigation("Designs");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Telaxia_Backend.Telaxia.Domain.Models.UserType", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
